install.packages("syuzhet")
library(bitops)
library(RCurl)
library(RJSONIO)
library(RColorBrewer)
library(tm)
library(topicmodels)
library(SnowballC)
library(textstem)
library(syuzhet)
install.packages("bitops")
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(ggplot2)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(sf)
library(ggplot2) #for geometry
library(dplyr) #for plotting
#point data example:Hopitals and urgent care facilities in fairfax
(sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson'))
#point data example:Hopitals and urgent care facilities in fairfax
(sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson') %>% select(OBJECTID, TYPE, DESCRIPTION, JURISDICTION, STREET_NUMBER, STREET_NAME, CITY, ZIP, GlobalID))
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(sf) #for geometry (point, line, polygon) and operations on geometry
library(ggplot2) #for plotting
library(dplyr)
#point data example:Hopitals and urgent care facilities in fairfax
(sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson') %>% select(OBJECTID, TYPE, DESCRIPTION, JURISDICTION, STREET_NUMBER, STREET_NAME, CITY, ZIP, GlobalID))
huc_points <- sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson') %>% select(OBJECTID, TYPE, DESCRIPTION, JURISDICTION, STREET_NUMBER, STREET_NAME, CITY, ZIP, GlobalID))
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(sf) #for geometry (point, line, polygon) and operations on geometry
library(ggplot2) #for plotting
library(dplyr)
#point data example:Hopitals and urgent care facilities in fairfax
(sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson') %>% select(OBJECTID, TYPE, DESCRIPTION, JURISDICTION, STREET_NUMBER, STREET_NAME, CITY, ZIP, GlobalID))
huc_points <- sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson') %>% select(OBJECTID, TYPE, DESCRIPTION, JURISDICTION, STREET_NUMBER, STREET_NAME, CITY, ZIP, GlobalID)
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(sf) #for geometry (point, line, polygon) and operations on geometry
library(ggplot2) #for plotting
library(dplyr)
#point data example:Hopitals and urgent care facilities in fairfax
(sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson') %>% select(OBJECTID, TYPE, DESCRIPTION, JURISDICTION, STREET_NUMBER, STREET_NAME, CITY, ZIP, GlobalID))
huc_points <- sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson') %>% select(OBJECTID, TYPE, DESCRIPTION, JURISDICTION, STREET_NUMBER, STREET_NAME, CITY, ZIP, GlobalID)
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(sf) #for geometry (point, line, polygon) and operations on geometry
library(ggplot2) #for plotting
library(dplyr)
#point data example:Hopitals and urgent care facilities in fairfax
(sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson') %>% select(OBJECTID, TYPE, DESCRIPTION, JURISDICTION, STREET_NUMBER, STREET_NAME, CITY, ZIP, GlobalID))
huc_points <- sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson') %>% select(OBJECTID, TYPE, DESCRIPTION, JURISDICTION, STREET_NUMBER, STREET_NAME, CITY, ZIP, GlobalID)
#map the Hospitals and urgent care facilities
```
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(sf) #for geometry (point, line, polygon) and operations on geometry
library(ggplot2) #for plotting
library(dplyr)
#point data example:Hopitals and urgent care facilities in fairfax
(sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson') %>% select(OBJECTID, TYPE, DESCRIPTION, JURISDICTION, STREET_NUMBER, STREET_NAME, CITY, ZIP, GlobalID))
huc_points <- sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson') %>% select(OBJECTID, TYPE, DESCRIPTION, JURISDICTION, STREET_NUMBER, STREET_NAME, CITY, ZIP, GlobalID)
#map the Hospitals and urgent care facilities in fairfax
#map the Hospitals and urgent care facilities in fairfax
ggplot(huc_points) +
geom_sf() +
labs(x='Latitude', y='Longitude', title='Hospital and urgent care facilities in fairfax')
#map the Hospitals and urgent care facilities in fairfax
ggplot(huc_points) +
geom_sf() +
labs(x='Latitude', y='Longitude', title='Hospital and urgent care facilities in Fairfax')
#polygon data example: download the population at the tract level from the census
library(tidycensus)
cenus_api_key(Sys.getenv('9bdb92edb46b046a08d8d8f399977133d0812609'))
#polygon data example: download the population at the tract level from the census
library(tidycensus)
cenus_api_key(Sys.getenv('9bdb92edb46b046a08d8d8f399977133d0812609'))
#polygon data example: download the population at the tract level from the census
library(tidycensus)
census_api_key(Sys.getenv('9bdb92edb46b046a08d8d8f399977133d0812609'))
acs <- data.table::setDT(
tidycensus::get_acs(
state = "VA",
county = '059',
survey = "acs5",
year = 2020,
geography = 'tract',
output = "wide",
variables = 'B01001_001',
geometry = TRUE,
)
)
acs <- st_as_sf(acs)
#polygon data example: download the population at the tract level from the census
library(tidycensus)
census_api_key(Sys.getenv('9bdb92edb46b046a08d8d8f399977133d0812609', install = TRUE))
#polygon data example: download the population at the tract level from the census
library(tidycensus)
census_api_key(Sys.getenv('9bdb92edb46b046a08d8d8f399977133d0812609'))
acs <- data.table::setDT(
tidycensus::get_acs(
state = "VA",
county = '059',
survey = "acs5",
year = 2020,
geography = 'tract',
output = "wide",
variables = 'B01001_001',
geometry = TRUE,
)
)
acs <- st_as_sf(acs)
ggplot(data = acs, aes(geometry = geometry)) +
geom_sf() +
labs(x='Latitude', y='Longitude', title='Census tract in Fairfax county')
# plot population by census tract
ggplot(data = acs, aes(geometry = geometry, fill = B01001_001E)) +
geom_sf() +
labs(x='Latitude', y='Longitude', title='Population by Census tract in Fairfax county')
# plot population by census tract
ggplot(data = acs, aes(geometry = geometry, fill = B01001_001E)) +
geom_sf() +
labs(x='Latitude', y='Longitude', title='Population by Census tract in Fairfax county')
# operation on GIS: assign HCU to census tract
#hcu_tract <- st_join(st_transform(acs, 4269), st_transform(huc_points, 4269), join = st_within, left=TRUE )
#hcu_tract
hcu_tract <- st_join(st_transform(huc_points, 4269), st_transform(acs, 4269), join = st_within)
hcu_tract
hcu_tract <- hcu_tract %>% group_by(GEOID) %>% summarise(HUC_count=length(OBJECTID)) %>% st_drop_geometry()
hcu_tract
hcu_merge <- merge(acs, hcu_tract, by='GEOID')
View(hcu_tract)
View(huc_points)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
#libraries
library(sf) #for geometry (point, line, polygon) and operations on geometry
library(ggplot2) #for plotting
library(dplyr)
# Chunk 3
#point data example:Hopitals and urgent care facilities in fairfax
(sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson') %>% select(OBJECTID, TYPE, DESCRIPTION, JURISDICTION, STREET_NUMBER, STREET_NAME, CITY, ZIP, GlobalID))
huc_points <- sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson') %>% select(OBJECTID, TYPE, DESCRIPTION, JURISDICTION, STREET_NUMBER, STREET_NAME, CITY, ZIP, GlobalID)
# Chunk 4
#map the Hospitals and urgent care facilities in fairfax
ggplot(huc_points) +
geom_sf() +
labs(x='Latitude', y='Longitude', title='Hospital and urgent care facilities in Fairfax')
# Chunk 5
#polygon data example: download the population at the tract level from the census
library(tidycensus)
census_api_key(Sys.getenv('9bdb92edb46b046a08d8d8f399977133d0812609'))
acs <- data.table::setDT(
tidycensus::get_acs(
state = "VA",
county = '059',
survey = "acs5",
year = 2020,
geography = 'tract',
output = "wide",
variables = 'B01001_001',
geometry = TRUE,
)
)
acs <- st_as_sf(acs)
# Chunk 6
#map the geometry
ggplot(data = acs, aes(geometry = geometry)) +
geom_sf() +
labs(x='Latitude', y='Longitude', title='Census tract in Fairfax county')
# Chunk 7
# plot population by census tract
ggplot(data = acs, aes(geometry = geometry, fill = B01001_001E)) +
geom_sf() +
labs(x='Latitude', y='Longitude', title='Population by Census tract in Fairfax county')
# Chunk 8
# operation on GIS: assign HCU to census tract
#hcu_tract <- st_join(st_transform(acs, 4269), st_transform(huc_points, 4269), join = st_within, left=TRUE )
#hcu_tract
hcu_tract <- st_join(st_transform(huc_points, 4269), st_transform(acs, 4269), join = st_within)
hcu_tract
hcu_tract <- hcu_tract %>% group_by(GEOID) %>% summarise(HUC_count=length(OBJECTID)) %>% st_drop_geometry()
hcu_tract
hcu_merge <- merge(acs, hcu_tract, by='GEOID')
# operation on GIS: assign HCU to census tract
#hcu_tract <- st_join(st_transform(acs, 4269), st_transform(huc_points, 4269), join = st_within, left=TRUE )
#hcu_tract
hcu_tract <- st_join(st_transform(huc_points, 4269), st_transform(acs, 4269), join = st_within)
hcu_tract
hcu_tract <- hcu_tract %>% group_by(GEOID) %>% summarise(HUC_count=length(OBJECTID)) %>% st_drop_geometry()
hcu_tract
hcu_merge <- merge(acs, hcu_tract, by='GEOID')
View(hcu_merge)
# map the number of Hospital and urgent cares facilities by census tracts
ggplot(data = hcu_merge, aes(geometry = geometry, fill = HUC_count)) +
geom_sf() +
labs(x='Latitude', y='Longitude', title='Number of Hospital and Urgent Care Units in Fairfax County')
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(readxl)
library(ggplot2)
library(wordcloud)
library(RColorBrewer)
library(wordcloud2)
library(reshape)
library(tm)
library(stringr)
# Chunk 3
#reads in SDC mission statement data
data <- read_excel("mission_statements.xlsx")
setwd("~/Documents/GitHub/dspg23census/SDC_Mission_Statements")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(readxl)
library(ggplot2)
library(wordcloud)
library(RColorBrewer)
library(wordcloud2)
library(reshape)
library(tm)
library(stringr)
# Chunk 3
#reads in SDC mission statement data
data <- read_excel("mission_statements.xlsx")
# Chunk 4
#Combines all mission statements
combo <- ""
for (i in 1:nrow(data)) {
if(data$Statement_Type[i] == "SDC") {
combo <- paste(combo, data$Mission_Statment_Text[i], sep="")
}
}
combo
# Chunk 5
#Turns string into corpus of words
docs <- Corpus(VectorSource(combo))
#Cleaning of corpus
docs <- docs %>% tm_map(removeNumbers) %>% tm_map(removePunctuation) %>% tm_map(stripWhitespace)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeWords, stopwords("english"))
#Turns corpus into term-document-matrix
dtm <- TermDocumentMatrix(docs)
mtx <- as.matrix(dtm)
words <- sort(rowSums(mtx), decreasing = TRUE)
df <- data.frame(word = names(words), freq=words)
#Creates wordcloud
set.seed(33)
wordcloud(words = df$word, freq = df$freq, min.freq = 1, max.words = 100, random.order = FALSE, rot.per = 0, colors = brewer.pal(4, "Set1"))
# Chunk 6
data$Host_Type[1]
# Chunk 7
#Bar graph of host org. counts
host_counts <- ggplot(data, aes(x=Host_Type)) + geom_bar(fill="steelblue") + labs(x="Type of Host Organization", y="Count", title="Host Ogranizations for SDCs")
host_counts
# Chunk 8
#Bar graph of Y/N statement counts
statement_counts <- ggplot(data, aes(x=Mission_Statement_Status)) + geom_bar(fill="steelblue") + labs(x = "", y="Count", title="Do SDCs Have Mission Statements")
statement_counts
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(readxl)
library(ggplot2)
library(wordcloud)
library(RColorBrewer)
library(wordcloud2)
library(reshape)
library(tm)
library(stringr)
# Chunk 3
#reads in SDC mission statement data
data <- read_excel("mission_statements.xlsx")
# Chunk 4
#Combines all mission statements
combo <- ""
for (i in 1:nrow(data)) {
if(data$Statement_Type[i] == "SDC") {
combo <- paste(combo, data$Mission_Statment_Text[i], sep="")
}
}
combo
# Chunk 5
#Turns string into corpus of words
docs <- Corpus(VectorSource(combo))
#Cleaning of corpus
docs <- docs %>% tm_map(removeNumbers) %>% tm_map(removePunctuation) %>% tm_map(stripWhitespace)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeWords, stopwords("english"))
#Turns corpus into term-document-matrix
dtm <- TermDocumentMatrix(docs)
mtx <- as.matrix(dtm)
words <- sort(rowSums(mtx), decreasing = TRUE)
df <- data.frame(word = names(words), freq=words)
#Creates wordcloud
set.seed(33)
wordcloud(words = df$word, freq = df$freq, min.freq = 1, max.words = 100, random.order = FALSE, rot.per = 0, colors = brewer.pal(4, "Set1"))
# Chunk 6
data$Host_Type[1]
# Chunk 7
#Bar graph of host org. counts
host_counts <- ggplot(data, aes(x=Host_Type)) + geom_bar(fill="steelblue") + labs(x="Type of Host Organization", y="Count", title="Host Ogranizations for SDCs")
host_counts
# Chunk 8
#Bar graph of Y/N statement counts
statement_counts <- ggplot(data, aes(x=Mission_Statement_Status)) + geom_bar(fill="steelblue") + labs(x = "", y="Count", title="Do SDCs Have Mission Statements")
statement_counts
library(readxl)
library(ggplot2)
library(wordcloud)
library(RColorBrewer)
library(wordcloud2)
library(reshape)
library(tm)
library(stringr)
library(plotly)
fig <- plot_ly(x=data$Mission_Statement_Status, type = "bar")
fig <- plot_ly(x=data$Mission_Statement_Status, type = "bar")
fig
#Bar graph of Y/N statement counts
statement_counts <- ggplot(data, aes(x=Mission_Statement_Status)) + geom_bar(fill="steelblue") + labs(x = "", y="Count", title="Do SDCs Have Mission Statements")
statement_counts
fig <- plot_ly(x=c("Yes", "No"), y = c(50, 6), type = "bar")
fig
length(data$Mission_Statement_Status)
fig1 <- plot_ly(x=c("Yes", "No"), y = c(50, 6), type = "bar")
fig1
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(readxl)
library(ggplot2)
library(wordcloud)
library(RColorBrewer)
library(wordcloud2)
library(reshape)
library(tm)
library(stringr)
library(plotly)
# Chunk 3
#reads in SDC mission statement data
data <- read_excel("mission_statements.xlsx")
# Chunk 4
#Combines all mission statements
combo <- ""
for (i in 1:nrow(data)) {
if(data$Statement_Type[i] == "SDC") {
combo <- paste(combo, data$Mission_Statment_Text[i], sep="")
}
}
combo
# Chunk 5
#Turns string into corpus of words
docs <- Corpus(VectorSource(combo))
#Cleaning of corpus
docs <- docs %>% tm_map(removeNumbers) %>% tm_map(removePunctuation) %>% tm_map(stripWhitespace)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeWords, stopwords("english"))
#Turns corpus into term-document-matrix
dtm <- TermDocumentMatrix(docs)
mtx <- as.matrix(dtm)
words <- sort(rowSums(mtx), decreasing = TRUE)
df <- data.frame(word = names(words), freq=words)
#Creates wordcloud
set.seed(33)
wordcloud(words = df$word, freq = df$freq, min.freq = 1, max.words = 100, random.order = FALSE, rot.per = 0, colors = brewer.pal(4, "Set1"))
# Chunk 6
length(data$Mission_Statement_Status)
# Chunk 7
#Bar graph of host org. counts
host_counts <- ggplot(data, aes(x=Host_Type)) + geom_bar(fill="steelblue") + labs(x="Type of Host Organization", y="Count", title="Host Ogranizations for SDCs")
host_counts
# Chunk 8
#Bar graph of Y/N statement counts
statement_counts <- ggplot(data, aes(x=Mission_Statement_Status)) + geom_bar(fill="steelblue") + labs(x = "", y="Count", title="Do SDCs Have Mission Statements")
statement_counts
# Chunk 9
fig1 <- plot_ly(x=c("Yes", "No"), y = c(50, 6), type = "bar")
fig1
#Bar graph of Y/N statement counts
statement_counts <- ggplot(data, aes(x=Mission_Statement_Status)) + geom_bar(fill="steelblue") + labs(x = "", y="Count", title="Do SDCs Have Mission Statements")
statement_counts
fig1 <- plot_ly(x=c("Yes", "No"), y = c(50, 6), type = "bar")
fig1
#Bar graph of host org. counts
host_counts <- ggplot(data, aes(x=Host_Type)) + geom_bar(fill="steelblue") + labs(x="Type of Host Organization", y="Count", title="Host Ogranizations for SDCs")
host_counts
#Bar graph of host org. counts
host_counts <- ggplot(data, aes(x=Host_Type)) + geom_bar(fill="steelblue") + labs(x="Type of Host Organization", y="Count", title="Host Ogranizations for SDCs")
host_counts
ggplotly(statement_counts)
fig1 <- plot_ly(x=c("Yes", "No"), y = c(50, 6), type = "bar")
fig1
ggplotly(statement_counts)
#Bar graph of host org. counts
host_counts <- ggplot(data, aes(x=Host_Type)) + geom_bar(fill="steelblue") + labs(x="Type of Host Organization", y="Count", title="Host Ogranizations for SDCs")
host_counts
ggplotly(host_counts)
#Bar graph of host org. counts
host_counts <- ggplot(data, aes(x=Host_Type)) + geom_bar(fill="steelblue") + labs(x="Type of Host Organization", y="Count", title="Host Ogranizations for SDCs")
ggplotly(host_counts)
#Bar graph of Y/N statement counts
statement_counts <- ggplot(data, aes(x=Mission_Statement_Status)) + geom_bar(fill="steelblue") + labs(x = "", y="Count", title="Do SDCs Have Mission Statements")
ggplotly(statement_counts)
length(data$Mission_Statement_Status)
#Bar graph of host org. counts
host_counts <- ggplot(data, aes(x=Host_Type)) + geom_bar(fill="steelblue") + labs(x="Type of Host Organization", y="Count", title="Host Ogranizations for SDC Lead Agencies")
ggplotly(host_counts)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(readxl)
library(ggplot2)
library(wordcloud)
library(RColorBrewer)
library(wordcloud2)
library(reshape)
library(tm)
library(stringr)
library(plotly)
# Chunk 3
#reads in SDC mission statement data
data <- read_excel("mission_statements.xlsx")
# Chunk 4
#Combines all mission statements
combo <- ""
for (i in 1:nrow(data)) {
if(data$Statement_Type[i] == "SDC") {
combo <- paste(combo, data$Mission_Statment_Text[i], sep="")
}
}
combo
# Chunk 5
#Turns string into corpus of words
docs <- Corpus(VectorSource(combo))
#Cleaning of corpus
docs <- docs %>% tm_map(removeNumbers) %>% tm_map(removePunctuation) %>% tm_map(stripWhitespace)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeWords, stopwords("english"))
#Turns corpus into term-document-matrix
dtm <- TermDocumentMatrix(docs)
mtx <- as.matrix(dtm)
words <- sort(rowSums(mtx), decreasing = TRUE)
df <- data.frame(word = names(words), freq=words)
#Creates wordcloud
set.seed(33)
wordcloud(words = df$word, freq = df$freq, min.freq = 1, max.words = 100, random.order = FALSE, rot.per = 0, colors = brewer.pal(4, "Set1"))
# Chunk 6
length(data$Mission_Statement_Status)
# Chunk 7
#Bar graph of host org. counts
host_counts <- ggplot(data, aes(x=Host_Type)) + geom_bar(fill="steelblue") + labs(x="Type of Host Organization", y="Count", title="Host Ogranizations for SDC Lead Agencies")
ggplotly(host_counts)
# Chunk 8
#Bar graph of Y/N statement counts
statement_counts <- ggplot(data, aes(x=Mission_Statement_Status)) + geom_bar(fill="steelblue") + labs(x = "", y="Count", title="Do SDCs Have Mission Statements")
ggplotly(statement_counts)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(readxl)
library(ggplot2)
library(wordcloud)
library(RColorBrewer)
library(wordcloud2)
library(reshape)
library(tm)
library(stringr)
library(plotly)
# Chunk 3
#reads in SDC mission statement data
data <- read_excel("mission_statements.xlsx")
# Chunk 4
#Combines all mission statements
combo <- ""
for (i in 1:nrow(data)) {
if(data$Statement_Type[i] == "SDC") {
combo <- paste(combo, data$Mission_Statment_Text[i], sep="")
}
}
combo
# Chunk 5
#Turns string into corpus of words
docs <- Corpus(VectorSource(combo))
#Cleaning of corpus
docs <- docs %>% tm_map(removeNumbers) %>% tm_map(removePunctuation) %>% tm_map(stripWhitespace)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeWords, stopwords("english"))
#Turns corpus into term-document-matrix
dtm <- TermDocumentMatrix(docs)
mtx <- as.matrix(dtm)
words <- sort(rowSums(mtx), decreasing = TRUE)
df <- data.frame(word = names(words), freq=words)
#Creates wordcloud
set.seed(33)
wordcloud(words = df$word, freq = df$freq, min.freq = 1, max.words = 100, random.order = FALSE, rot.per = 0, colors = brewer.pal(4, "Set1"))
# Chunk 6
length(data$Mission_Statement_Status)
# Chunk 7
#Bar graph of host org. counts
host_counts <- ggplot(data, aes(x=Host_Type)) + geom_bar(fill="blue") + labs(x="Type of Host Organization", y="Count", title="Host Ogranizations for SDC Lead Agencies")
ggplotly(host_counts)
# Chunk 8
#Bar graph of Y/N statement counts
statement_counts <- ggplot(data, aes(x=Mission_Statement_Status)) + geom_bar(fill="blue") + labs(x = "", y="Count", title="Do SDCs Have Mission Statements")
ggplotly(statement_counts)
