library(ggplot2)
library(wordcloud)
library(RColorBrewer)
library(wordcloud2)
library(reshape)
library(tm)
library(stringr)
library(plotly)
# Chunk 3
#Reads in housing data
housing <- read.csv('housing_cleaned.csv')
# Chunk 4
#Creates list of columns in df
housing_columns = colnames(housing)
#Drops 'X' column from df
housing_columns = housing_columns[-1]
housing_columns = housing_columns[-11]
housing = subset(housing, select = housing_columns)
# Chunk 5
#Sub-Categories
#Number/types of sub-categories-bar chart
#Creates a bar graph of sub-category types
sub_cat_counts <- function(state) {
if(state=="all states") {
sub_cats <- ggplot(housing, aes(x=Sub.categories)) + geom_bar(fill="blue") + labs(x="Sub-Categories", y="Count", title="Types of Sub-Categories") + theme(axis.text.x = element_text(angle = 25))
ggplotly(sub_cats)
}
else {
State <- str_to_title(state)
state_input <- housing[housing[, "State"]==state, ]
state_df <- data.frame()
state_df <- rbind(state_df, state_input)
sub_cats <- ggplot(state_df, aes(x=Sub.categories)) + geom_bar(fill="blue") + labs(x="Sub-Categories", y="Count", title="Types of Sub-Categories") + theme(axis.text.x = element_text(angle = 25))
ggplotly(sub_cats)
}
}
# Chunk 6
sub_cat_counts("alaska")
# Chunk 7
#Tool
#Number/types of tools-pie chart
#fix
tools <- ggplot(housing, aes(x=Tool)) + geom_bar(fill="blue") + labs(x="Tool", y="Count", title="Types of Tools") + theme(axis.text.x = element_text(angle = 45))
ggplotly(tools)
# Chunk 8
#Tool Name
#Word cloud for tool names
#Input is designated state
tool_cloud <- function(state) {
if(state=="all states"){
combo <- ""
for (i in 1:nrow(housing)) {
combo <- paste(combo, housing$Tool.Name[i], sep="")
}
}
else{
#Combines all variables into one string
combo <- ""
for (i in 1:nrow(housing)) {
if(housing$State[i]==state) {
combo <- paste(combo, housing$Tool.Name[i], sep="")
}
}
}
#Turns string into corpus of words
docs <- Corpus(VectorSource(combo))
#Cleaning of corpus
docs <- docs %>% tm_map(removeNumbers) %>% tm_map(removePunctuation) %>% tm_map(stripWhitespace)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeWords, stopwords("english"))
#Turns corpus into term-document-matrix
dtm <- TermDocumentMatrix(docs)
mtx <- as.matrix(dtm)
words <- sort(rowSums(mtx), decreasing = TRUE)
df <- data.frame(word = names(words), freq=words)
#Creates wordcloud
set.seed(33)
cloud <- wordcloud(words = df$word, freq = df$freq, min.freq = 1, max.words = 100, random.order = FALSE, rot.per = 0, colors = brewer.pal(4, "Set1"))
return(cloud)
}
# Chunk 9
#Variables
#Word cloud for variable names
#Input is designated state
variable_cloud <- function(state) {
if(state=="all states"){
combo <- ""
for (i in 1:nrow(housing)) {
combo <- paste(combo, housing$Variables[i], sep="")
}
}
else{
#Combines all variables into one string
combo <- ""
for (i in 1:nrow(housing)) {
if(housing$State[i]==state) {
combo <- paste(combo, housing$Variables[i], sep="")
}
}
}
#Turns string into corpus of words
docs <- Corpus(VectorSource(combo))
#Cleaning of corpus
docs <- docs %>% tm_map(removeNumbers) %>% tm_map(removePunctuation) %>% tm_map(stripWhitespace)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeWords, stopwords("english"))
#Turns corpus into term-document-matrix
dtm <- TermDocumentMatrix(docs)
mtx <- as.matrix(dtm)
words <- sort(rowSums(mtx), decreasing = TRUE)
df <- data.frame(word = names(words), freq=words)
#Creates wordcloud
set.seed(33)
cloud <- wordcloud(words = df$word, freq = df$freq, min.freq = 1, max.words = 100, random.order = FALSE, rot.per = 0, colors = brewer.pal(4, "Set1"))
return(cloud)
}
# Chunk 10
#Geographic Levels
#Number/types of geographic levels-pie chart
#fix
geo <- ggplot(housing, aes(x=Geographic.Levels)) + geom_bar(fill="blue") + labs(x="Geographic Levels", y="Count", title="Types of Geoographic Levels") + theme(axis.text.x = element_text(angle = 45))
ggplotly(geo)
# Chunk 11
#Data Sources-Census
#Number/types of census sources-bar chart, pie chart, count
#fix: exclude if value is NA
#fix: by state
census <- ggplot(housing, aes(x=Data.Sources.Census)) + geom_bar(fill="blue") + labs(x="Census Source", y="Count", title="Types of Census Sources") + theme(axis.text.x = element_text(angle = 45))
ggplotly(census)
# Chunk 12
#Data Sources-Non Census
#Number/types of non-census sources-bar chart, pie chart, count
#fix: exclude if value is NA
#fix: by state
non_census <- ggplot(housing, aes(x=Data.Sources.Non.Census)) + geom_bar(fill="blue") + labs(x="Data Sources", y="Count", title="Data Sources") + theme(axis.text.x = element_text(angle = 45))
ggplotly(non_census)
# Chunk 13
#Direct Links to Census
#Count
# Chunk 14
#Age of Data
#Number/types of age of data-pie chart
#Oldest data, most recent
# Chunk 15
#Historical Data
#Count
#Reads in housing data
housing <- read.csv('housing_cleaned.csv')
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
#Import libraries
library(ggplot2)
library(wordcloud)
library(RColorBrewer)
library(wordcloud2)
library(reshape)
library(tm)
library(stringr)
library(plotly)
# Chunk 3
#Reads in housing data
housing <- read.csv('housing_cleaned.csv')
# Chunk 4
#Creates list of columns in df
housing_columns = colnames(housing)
#Drops 'X' column from df
housing_columns = housing_columns[-1]
housing_columns = housing_columns[-11]
housing = subset(housing, select = housing_columns)
# Chunk 5
#Sub-Categories
#Number/types of sub-categories-bar chart
#Creates a bar graph of sub-category types
sub_cat_counts <- function(state) {
if(state=="all states") {
sub_cats <- ggplot(housing, aes(x=Sub.categories)) + geom_bar(fill="blue") + labs(x="Sub-Categories", y="Count", title="Types of Sub-Categories") + theme(axis.text.x = element_text(angle = 25))
ggplotly(sub_cats)
}
else {
State <- str_to_title(state)
state_input <- housing[housing[, "State"]==state, ]
state_df <- data.frame()
state_df <- rbind(state_df, state_input)
sub_cats <- ggplot(state_df, aes(x=Sub.categories)) + geom_bar(fill="blue") + labs(x="Sub-Categories", y="Count", title="Types of Sub-Categories") + theme(axis.text.x = element_text(angle = 25))
ggplotly(sub_cats)
}
}
# Chunk 6
sub_cat_counts("alaska")
# Chunk 7
#Tool
#Number/types of tools-pie chart
#fix
tools <- ggplot(housing, aes(x=Tool)) + geom_bar(fill="blue") + labs(x="Tool", y="Count", title="Types of Tools") + theme(axis.text.x = element_text(angle = 45))
ggplotly(tools)
# Chunk 8
#Tool Name
#Word cloud for tool names
#Input is designated state
tool_cloud <- function(state) {
if(state=="all states"){
combo <- ""
for (i in 1:nrow(housing)) {
combo <- paste(combo, housing$Tool.Name[i], sep="")
}
}
else{
#Combines all variables into one string
combo <- ""
for (i in 1:nrow(housing)) {
if(housing$State[i]==state) {
combo <- paste(combo, housing$Tool.Name[i], sep="")
}
}
}
#Turns string into corpus of words
docs <- Corpus(VectorSource(combo))
#Cleaning of corpus
docs <- docs %>% tm_map(removeNumbers) %>% tm_map(removePunctuation) %>% tm_map(stripWhitespace)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeWords, stopwords("english"))
#Turns corpus into term-document-matrix
dtm <- TermDocumentMatrix(docs)
mtx <- as.matrix(dtm)
words <- sort(rowSums(mtx), decreasing = TRUE)
df <- data.frame(word = names(words), freq=words)
#Creates wordcloud
set.seed(33)
cloud <- wordcloud(words = df$word, freq = df$freq, min.freq = 1, max.words = 100, random.order = FALSE, rot.per = 0, colors = brewer.pal(4, "Set1"))
return(cloud)
}
# Chunk 9
#Variables
#Word cloud for variable names
#Input is designated state
variable_cloud <- function(state) {
if(state=="all states"){
combo <- ""
for (i in 1:nrow(housing)) {
combo <- paste(combo, housing$Variables[i], sep="")
}
}
else{
#Combines all variables into one string
combo <- ""
for (i in 1:nrow(housing)) {
if(housing$State[i]==state) {
combo <- paste(combo, housing$Variables[i], sep="")
}
}
}
#Turns string into corpus of words
docs <- Corpus(VectorSource(combo))
#Cleaning of corpus
docs <- docs %>% tm_map(removeNumbers) %>% tm_map(removePunctuation) %>% tm_map(stripWhitespace)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeWords, stopwords("english"))
#Turns corpus into term-document-matrix
dtm <- TermDocumentMatrix(docs)
mtx <- as.matrix(dtm)
words <- sort(rowSums(mtx), decreasing = TRUE)
df <- data.frame(word = names(words), freq=words)
#Creates wordcloud
set.seed(33)
cloud <- wordcloud(words = df$word, freq = df$freq, min.freq = 1, max.words = 100, random.order = FALSE, rot.per = 0, colors = brewer.pal(4, "Set1"))
return(cloud)
}
# Chunk 10
#Geographic Levels
#Number/types of geographic levels-pie chart
#fix
geo <- ggplot(housing, aes(x=Geographic.Levels)) + geom_bar(fill="blue") + labs(x="Geographic Levels", y="Count", title="Types of Geoographic Levels") + theme(axis.text.x = element_text(angle = 45))
ggplotly(geo)
# Chunk 11
#Data Sources-Census
#Number/types of census sources-bar chart, pie chart, count
#fix: exclude if value is NA
#fix: by state
census <- ggplot(housing, aes(x=Data.Sources.Census)) + geom_bar(fill="blue") + labs(x="Census Source", y="Count", title="Types of Census Sources") + theme(axis.text.x = element_text(angle = 45))
ggplotly(census)
# Chunk 12
#Data Sources-Non Census
#Number/types of non-census sources-bar chart, pie chart, count
#fix: exclude if value is NA
#fix: by state
non_census <- ggplot(housing, aes(x=Data.Sources.Non.Census)) + geom_bar(fill="blue") + labs(x="Data Sources", y="Count", title="Data Sources") + theme(axis.text.x = element_text(angle = 45))
ggplotly(non_census)
# Chunk 13
#Direct Links to Census
#Count
# Chunk 14
#Age of Data
#Number/types of age of data-pie chart
#Oldest data, most recent
# Chunk 15
#Historical Data
#Count
runApp('~/Documents/GitHub/dspg23census/project_web/web_code.R')
sub_cat_counts("all states")
#Direct Links to Census
#Count
!housing$Direct.links.to.Census=='n'
#Direct Links to Census
#Count
sum(!housing$Direct.links.to.Census=='n')
#Age of Data
#Number/types of age of data-pie chart
#Oldest data, most recent
max(housing$Age.of.data)
#Age of Data
#Number/types of age of data-pie chart
#Oldest data, most recent
max(!housing$Age.of.data=='n')
#Age of Data
#Number/types of age of data-pie chart
#Oldest data, most recent
#Age of Data
#Number/types of age of data-pie chart
#Oldest data, most recent
#Historical Data
#Count
sum(housing$Historical.data=='Y')
#Historical Data
#Count
sum(housing$Historical.data=='y')
runApp('~/Documents/GitHub/dspg23census/project_web/web_code.R')
runApp('~/Documents/GitHub/dspg23census/project_web/web_code.R')
#Reads in housing data
housing <- read.csv('housing_cleaned.csv')
#Creates list of columns in df
housing_columns = colnames(housing)
#Drops 'X' column from df
housing_columns = housing_columns[-1]
housing_columns = housing_columns[-11]
housing = subset(housing, select = housing_columns)
#Sub-Categories
#Number/types of sub-categories-bar chart
#Creates a bar graph of sub-category types
sub_cat_counts <- function(state) {
if(state=="all states") {
sub_cats <- ggplot(housing, aes(x=Sub.categories)) + geom_bar(fill="blue") + labs(x="Sub-Categories", y="Count", title="Types of Sub-Categories") + theme(axis.text.x = element_text(angle = 25))
ggplotly(sub_cats)
}
else { #fix
State <- str_to_title(state)
state_input <- housing[housing[, "State"]==state, ]
state_df <- data.frame()
state_df <- rbind(state_df, state_input)
sub_cats <- ggplot(state_df, aes(x=Sub.categories)) + geom_bar(fill="blue") + labs(x="Sub-Categories", y="Count", title="Types of Sub-Categories") + theme(axis.text.x = element_text(angle = 25))
ggplotly(sub_cats)
}
}
state_df
sub_cat_counts("california")
sub_cat_counts("california")
runApp('~/Documents/GitHub/dspg23census/project_web/web_code.R')
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
health_edu <- read.csv('HE_cleaned.csv')
setwd("~/Documents/GitHub/dspg23census/Health_and_Education")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
health_edu <- read.csv('HE_cleaned.csv')
# Chunk 3
#Creates list of columns in df
HE_columns = colnames(health_edu)
#Drops 'X' column from df
HE_columns = HE_columns[-1]
health_edu = subset(health_edu, select = HE_columns)
# Chunk 4
#Sub-Categories
#Number/types of sub-categories-bar chart
#Creates a bar graph of sub-category types
sub_cat_counts <- function(state) {
if(state=="all states") {
sub_cats <- ggplot(health_edu, aes(x=Sub.categories)) + geom_bar(fill="blue") + labs(x="Sub-Categories", y="Count", title="Types of Sub-Categories") + theme(axis.text.x = element_text(angle = 25))
ggplotly(sub_cats)
}
else {
State <- str_to_title(state)
state_input <- health_edu[health_edu[, "State"]==state, ]
state_df <- data.frame()
state_df <- rbind(state_df, state_input)
sub_cats <- ggplot(state_df, aes(x=Sub.categories)) + geom_bar(fill="blue") + labs(x="Sub-Categories", y="Count", title="Types of Sub-Categories") + theme(axis.text.x = element_text(angle = 25))
ggplotly(sub_cats)
}
}
# Chunk 5
sub_cat_counts("all states")
# Chunk 6
#Tool
#Number/types of tools-pie chart
# Chunk 7
#Tool Name
#Word cloud for tool names
#Input is designated state
tool_cloud <- function(state) {
if(state=="all states"){
combo <- ""
for (i in 1:nrow(health_edu)) {
combo <- paste(combo, health_edu$Tool.Name[i], sep="")
}
}
else{
#Combines all variables into one string
combo <- ""
for (i in 1:nrow(health_edu)) {
if(health_edu$State[i]==state) {
combo <- paste(combo, health_edu$Tool.Name[i], sep="")
}
}
}
#Turns string into corpus of words
docs <- Corpus(VectorSource(combo))
#Cleaning of corpus
docs <- docs %>% tm_map(removeNumbers) %>% tm_map(removePunctuation) %>% tm_map(stripWhitespace)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeWords, stopwords("english"))
#Turns corpus into term-document-matrix
dtm <- TermDocumentMatrix(docs)
mtx <- as.matrix(dtm)
words <- sort(rowSums(mtx), decreasing = TRUE)
df <- data.frame(word = names(words), freq=words)
#Creates wordcloud
set.seed(33)
cloud <- wordcloud(words = df$word, freq = df$freq, min.freq = 1, max.words = 100, random.order = FALSE, rot.per = 0, colors = brewer.pal(4, "Set1"))
return(cloud)
}
# Chunk 8
#Variables
#Word cloud for variable names
#Input is designated state
variable_cloud <- function(state) {
if(state=="all states"){
combo <- ""
for (i in 1:nrow(health_edu)) {
combo <- paste(combo, health_edu$Variables[i], sep="")
}
}
else{
#Combines all variables into one string
combo <- ""
for (i in 1:nrow(health_edu)) {
if(health_edu$State[i]==state) {
combo <- paste(combo, health_edu$Variables[i], sep="")
}
}
}
#Turns string into corpus of words
docs <- Corpus(VectorSource(combo))
#Cleaning of corpus
docs <- docs %>% tm_map(removeNumbers) %>% tm_map(removePunctuation) %>% tm_map(stripWhitespace)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeWords, stopwords("english"))
#Turns corpus into term-document-matrix
dtm <- TermDocumentMatrix(docs)
mtx <- as.matrix(dtm)
words <- sort(rowSums(mtx), decreasing = TRUE)
df <- data.frame(word = names(words), freq=words)
#Creates wordcloud
set.seed(33)
cloud <- wordcloud(words = df$word, freq = df$freq, min.freq = 1, max.words = 100, random.order = FALSE, rot.per = 0, colors = brewer.pal(4, "Set1"))
return(cloud)
}
# Chunk 9
#Geographic Levels
#Number/types of geographic levels-pie chart
# Chunk 10
#Data Sources-Census
#Number/types of census sources-pie chart
# Chunk 11
#Data Sources-Non Census
#Number/types of non-census sources-pie chart
# Chunk 12
#Direct Links to Census
#Count of census links
# Chunk 13
#Age of Data
#Number/types of age of data-pie chart
# Chunk 14
#Historical Data
#Count
sum(health_edu$Historical.data=='y')
health_edu <- read.csv('HE_cleaned.csv')
#Creates list of columns in df
HE_columns = colnames(health_edu)
#Drops 'X' column from df
HE_columns = HE_columns[-1]
health_edu = subset(health_edu, select = HE_columns)
#Sub-Categories
#Number/types of sub-categories-bar chart
#Creates a bar graph of sub-category types
sub_cat_counts <- function(state) {
if(state=="all states") {
sub_cats <- ggplot(health_edu, aes(x=Sub.categories)) + geom_bar(fill="blue") + labs(x="Sub-Categories", y="Count", title="Types of Sub-Categories") + theme(axis.text.x = element_text(angle = 25))
ggplotly(sub_cats)
}
else {
State <- str_to_title(state)
state_input <- health_edu[health_edu[, "State"]==state, ]
state_df <- data.frame()
state_df <- rbind(state_df, state_input)
sub_cats <- ggplot(state_df, aes(x=Sub.categories)) + geom_bar(fill="blue") + labs(x="Sub-Categories", y="Count", title="Types of Sub-Categories") + theme(axis.text.x = element_text(angle = 25))
ggplotly(sub_cats)
}
}
sub_cat_counts("all states")
#Tool
#Number/types of tools-pie chart
